install.packages(c("jsonlite", "curl"))
library(jsonlite)
require("jsonlite")
f1 <- fromJSON('http://ergast.com/api/f1/1957/results.json')
f1
str(f1)
# Convert R list to data.frame
dr <- f1$MRData$RaceTable$Races$Results[[1]]$Driver
colnames(dr)
dr[1:5, c("givenName", "familyName",
"dateOfBirth", "nationality")]
View(f1)
f1[["MRData"]]
shiny::runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
?sliderInput
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
print(df$discount)
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
shiny::runApp('Documents/deal_scoring/onemd_deal_scoring/app')
all_cluster_data %>% select(franchise == ucn_franchise_data_profile()$franchise)
shiny::runApp('Documents/deal_scoring/onemd_deal_scoring/app')
all_cluster_data %>% select(franchise == ucn_franchise_data_profile()$franchise)
all_cluster_data %>% select(franchise == "Mitek")
all_cluster_data %>% filter(franchise == "Mitek") %>% select(cluster)
all_cluster_data %>% filter(franchise == "Mitek") %>% select(cluster) %>% as.character() %>%n_distinct
all_cluster_data %>% filter(franchise == "Mitek") %>% select(cluster) %>% as.character()
all_cluster_data %>% filter(franchise == "Mitek") %>% select(cluster)
all_cluster_data %>% filter(franchise == "Mitek") %>% select(cluster) %>% n_distinct()
all_cluster_data %>% filter(franchise == "Joint Recon") %>% select(cluster) %>% n_distinct()
all_cluster_data$cluster %>% filter(franchise == "Joint Recon") %>% n_distinct()
all_cluster_data %>% filter(franchise == "Joint Recon") %>% select(cluster) %>% n_distinct()
all_cluster_data %>% filter(franchise == "CMF") %>% select(cluster) %>% n_distinct()
all_cluster_data %>% filter(franchise == "CMF") %>% select(cluster)
all_cluster_data %>% filter(franchise == "CMF") %>% select(cluster) %>% typeof()
all_cluster_data %>% filter(franchise == "CMF") %>% select(cluster) %>% max()
all_cluster_data %>% filter(franchise == "CMF") %>% select(cluster) %>% typeof(558[2])
all_cluster_data %>% filter(franchise == "CMF") %>% select(cluster) %>% typeof(558[])
all_cluster_data %>% filter(franchise == "CMF") %>% select(cluster) %>% typeof(558[1])
all_cluster_data %>% filter(franchise == "CMF") %>% select(cluster) %>% count()
all_cluster_data %>% filter(franchise == "CMF") %>% select(cluster) %>% n_distinct
all_cluster_data %>% filter(franchise == "Joint Recon") %>% select(cluster) %>% length(unique())
all_cluster_data %>% filter(franchise == "Joint Recon") %>% select(cluster) %>% unique()
all_cluster_data %>% filter(franchise == "CMF") %>% select(cluster) %>% unique()
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('app')
runApp('app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('app')
runApp('app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
runApp('Documents/deal_scoring/onemd_deal_scoring/app')
getwd)
getwd()
setwd(/Users/augustusge/Desktop/Brown Biostats/PHP2550/Final/predicting-wimbledon-matches/data")
setwd("/Users/augustusge/Desktop/Brown Biostats/PHP2550/Final/predicting-wimbledon-matches/data")
setwd("/Users/augustusge/Desktop/Brown Biostats/PHP2550/Final/predicting-wimbledon-matches/")
read.csv("data/grass_matches_with_feature.csv")
round_16 = read.csv("data/wimbledon_2019.csv")
# Read in files
grass_tennis = read.csv("data/grass_matches_with_feature.csv")
raw_tennis = read.csv("data/mens/combined_raw_data.csv")
raw_tennis = read.csv("data/mens/combined_raw_data.csv")
round_16 = read.csv("data/wimbledon_2019.csv")
read.csv("data/grass_matches_with_feature.csv")
features_list = c('diff_rank', 'diff_match_win_percent', 'diff_games_win_percent', 'diff_5_set_match_win_percent', 'diff_close_sets_percent', 'diff_match_win_percent_grass', 'diff_games_win_percent_grass', 'diff_5_set_match_win_percent_grass', 'diff_close_sets_percent_grass', 'diff_match_win_percent_52', 'diff_games_win_percent_52', 'diff_5_set_match_win_percent_52', 'diff_close_sets_percent_52', 'diff_match_win_percent_grass_60', 'diff_games_win_percent_grass_60', 'diff_5_set_match_win_percent_grass_60', 'diff_close_sets_percent_grass_60', 'diff_match_win_percent_hh', 'diff_games_win_percent_hh', 'diff_match_win_percent_grass_hh', 'diff_games_win_percent_grass_hh')
grass_tennis = grass_tennis[complete.cases(grass_tennis), ]
grass_tennis$diff_rank = grass_tennis$player_0_rank - grass_tennis$player_1_rank
View(grass_tennis)
# Prepare training dataset
features_list = c('diff_rank', 'diff_match_win_percent', 'diff_games_win_percent', 'diff_5_set_match_win_percent', 'diff_close_sets_percent', 'diff_match_win_percent_grass', 'diff_games_win_percent_grass', 'diff_5_set_match_win_percent_grass', 'diff_close_sets_percent_grass', 'diff_match_win_percent_52', 'diff_games_win_percent_52', 'diff_5_set_match_win_percent_52', 'diff_close_sets_percent_52', 'diff_match_win_percent_grass_60', 'diff_games_win_percent_grass_60', 'diff_5_set_match_win_percent_grass_60', 'diff_close_sets_percent_grass_60', 'diff_match_win_percent_hh', 'diff_games_win_percent_hh', 'diff_match_win_percent_grass_hh', 'diff_games_win_percent_grass_hh')
grass_tennis = grass_tennis[complete.cases(grass_tennis), ]
grass_tennis$diff_rank = grass_tennis$player_0_rank - grass_tennis$player_1_rank
y = grass_tennis$outcome
X = grass_tennis %>% dplyr::select(features_list)
pacman::p_load(dplyr, neuralnet, caret)
X = grass_tennis %>% dplyr::select(features_list)
X_train = X[train_index]
train_index = createDataPartition(y, p = .8, list = FALSE, times = 1)
X_train = X[train_index]
set.seed(105)
train_index = createDataPartition(y, p = .8, list = FALSE, times = 1)
X_train = X[train_index]
X_test = X[-train_index]
y_train = y[train_index]
y_test = y[-train_index]
grass_tennis %>% grass_tennis %>% dplyr::select(features_list)
# Read in files
grass_tennis = read.csv("data/grass_matches_with_feature.csv")
raw_tennis = read.csv("data/mens/combined_raw_data.csv")
raw_tennis = read.csv("data/mens/combined_raw_data.csv")
round_16 = read.csv("data/wimbledon_2019.csv")
grass_tennis = grass_tennis[complete.cases(grass_tennis), ]
grass_tennis$diff_rank = grass_tennis$player_0_rank - grass_tennis$player_1_rank
grass_tennis %>% grass_tennis %>% dplyr::select(features_list)
grass_tennis = grass_tennis %>% dplyr::select(features_list)
set.seed(105)
train_index = createDataPartition(grass_tennis$outcome, p = .8, list = FALSE, times = 1)
grass_tennis = grass_tennis %>% dplyr::select(features_list, "outcome")
# Read in files
grass_tennis = read.csv("data/grass_matches_with_feature.csv")
grass_tennis = grass_tennis[complete.cases(grass_tennis), ]
grass_tennis$diff_rank = grass_tennis$player_0_rank - grass_tennis$player_1_rank
grass_tennis = grass_tennis %>% dplyr::select(features_list, "outcome")
set.seed(105)
train_index = createDataPartition(grass_tennis$outcome, p = .8, list = FALSE, times = 1)
grass_tennis_train = grass_tennis[train_index]
grass_tennis_test = grass_tennis[-train_index]
View(grass_tennis_train)
grass_tennis_train = grass_tennis[train_index,]
grass_tennis_test = grass_tennis[-train_index,]
View(grass_tennis_test)
neuralnet(outcome ~ ., data = grass_tennis_train)
nn_model = neuralnet(outcome ~ ., data = grass_tennis_train)
nn_model$response
nn_model$result.matrix
plot(nn_model)
nn_model = neuralnet(outcome ~ ., data = grass_tennis_train, hidden = 5)
nn_model = neuralnet(outcome ~ ., data = grass_tennis_train, hidden = 2)
plot(nn_model)
nn_model$result.matrix
prediction(nn_model)
cor(grass_tennis)
pacman::p_load(dplyr, caret, corrplot)
corrplot(cor(grass_tennis))
corrplot(cor(grass_tennis))
```{r}
cor(grass_tennis)
pacman::p_load(dplyr, caret, corrplot, MASS)
reduced_model = stepAIC(glm(outcome ~ ., data = grass_tennis, family = "binomial"))
reduced_model = stepAIC(glm(outcome ~ ., data = grass_tennis, family = "binomial"), trace = F)
summary(reduced_model)
summary(reduced_model)
pairs(grass_tennis[reduced_feats,])
pairs(grass_tennis[,c("diff_rank", "diff_match_win_percent", "diff_5_set_match_win_percent", "diff_match_win_percent_grass", "diff_games_win_percent_grass", "diff_5_set_match_win_percent_grass", "diff_match_win_percent_52", "diff_games_win_percent_grass_60", "diff_games_win_percent_hh")])
pairs(grass_tennis[,reduced_feats)
pairs(grass_tennis[,reduced_feats])
pairs(grass_tennis[,c("diff_rank", "diff_match_win_percent", "diff_5_set_match_win_percent", "diff_match_win_percent_grass", "diff_games_win_percent_grass", "diff_5_set_match_win_percent_grass", "diff_match_win_percent_52", "diff_games_win_percent_grass_60", "diff_games_win_percent_hh")])
nn_model$response
sum(nn_model$response == grass_tennis_train$outcome)
mean(nn_model$response == grass_tennis_train$outcome)
pred_nn = prediction(nn_model)
prediction(nn_model)
pred_nn = compute(nn_model, grass_tennis_test)
pred_nn
pred_nn$net.result
pacman::p_load(dplyr, neuralnet, caret, verification)
roc.plot(grass_tennis_test$outcome, pred_nn$net.result)
roc.area()
roc.plot(grass_tennis_test$outcome, pred_nn$net.result)
roc.area()
roc.area(grass_tennis_test$outcome, pred_nn$net.result)
View(pred_nn$net.result)
grass_tennis_test$outcome
roc.plot(grass_tennis_test$outcome, pred_nn$net.result)
nn_model = neuralnet(outcome ~ ., data = grass_tennis_train, hidden = 10)
nn_model = neuralnet(outcome ~ ., data = grass_tennis_train, hidden = 5)
nn_model = neuralnet(outcome ~ ., data = grass_tennis_train, hidden = 3)
nn_model = neuralnet(outcome ~ ., data = grass_tennis_train, hidden = 3)
plot(nn_model)
pred_nn = compute(nn_model, grass_tennis_test)
roc.plot(grass_tennis_test$outcome, pred_nn$net.result)
roc.area(grass_tennis_test$outcome, pred_nn$net.result)
nn_model = neuralnet(outcome ~ ., data = grass_tennis_train, hidden = 5)
nn_model = neuralnet(outcome ~ ., data = grass_tennis_train, hidden = 1)
plot(nn_model)
pred_nn = compute(nn_model, grass_tennis_test)
View(pred_nn$net.result)
grass_tennis_test$outcome
roc.plot(grass_tennis_test$outcome, pred_nn$net.result)
roc.area(grass_tennis_test$outcome, pred_nn$net.result)
mean(grass_tennis_test$outcome)
mean(grass_tennis_test$outcome == pred_nn$net.result)
sum(grass_tennis_test$outcome == pred_nn$net.result)
grass_tennis_test$outcome == pred_nn$net.result
grass_tennis_test$outcome == ifelse(pred_nn$net.result > .5, 1, 0)
sum(grass_tennis_test$outcome == ifelse(pred_nn$net.result > .5, 1, 0))
mean(grass_tennis_test$outcome == ifelse(pred_nn$net.result > .5, 1, 0))
mean(grass_tennis_test$outcome == ifelse(pred_nn$net.result > .6, 1, 0))
mean(grass_tennis_test$outcome == ifelse(pred_nn$net.result > .4, 1, 0))
mean(grass_tennis_test$outcome == ifelse(pred_nn$net.result > .3, 1, 0))
mean(grass_tennis_test$outcome == ifelse(pred_nn$net.result > .1, 1, 0))
mean(grass_tennis_test$outcome == ifelse(pred_nn$net.result > .8, 1, 0))
mean(grass_tennis_test$outcome == ifelse(pred_nn$net.result > .7, 1, 0))
mean(grass_tennis_test$outcome == ifelse(pred_nn$net.result > .6, 1, 0))
pairs(grass_tennis[,c("diff_rank", "diff_match_win_percent", "diff_5_set_match_win_percent", "diff_match_win_percent_grass", "diff_games_win_percent_grass", "diff_5_set_match_win_percent_grass", "diff_match_win_percent_52", "diff_games_win_percent_grass_60", "diff_games_win_percent_hh")])
reduced_model$coefficients
grass_tennis_select = grass_tennis %>% dplyr::select(reduced_feats)
reduced_feats = c("diff_rank", "diff_match_win_percent", "diff_5_set_match_win_percent", "diff_match_win_percent_grass", "diff_games_win_percent_grass", "diff_5_set_match_win_percent_grass", "diff_match_win_percent_52", "diff_games_win_percent_grass_60", "diff_games_win_percent_hh")
pairs(grass_tennis[,reduced_feats])
grass_tennis_select = grass_tennis %>% dplyr::select(reduced_feats)
glm(outcome ~ ., data = grass_tennis_select, family = "binomial")
grass_tennis_select = grass_tennis %>% dplyr::select(reduced_feats, "outcome")
glm(outcome ~ ., data = grass_tennis_select, family = "binomial")
log_reg_model = glm(outcome ~ ., data = grass_tennis_select, family = "binomial")
sum.log_reg = summary(log_reg_model)
sum.log_reg
R2(sum.log_reg)
R2(log_reg_model)
predict(log_reg_model, newdata = grass_tennis_select)
mean(grass_tennis_select$outcome == ifelse(lg_preds > .5, 1, 0))
lg_preds = predict(log_reg_model, newdata = grass_tennis_select)
mean(grass_tennis_select$outcome == ifelse(lg_preds > .5, 1, 0))
mean(grass_tennis_select$outcome == ifelse(lg_preds > .6, 1, 0))
mean(grass_tennis_select$outcome == ifelse(lg_preds > .7, 1, 0))
pacman::p_load(dplyr, caret, corrplot, MASS, verifications)
pacman::p_load(dplyr, caret, corrplot, MASS, verification)
roc.plot(grass_tennis_select$outcome, lg_preds)
roc.area(grass_tennis_select$outcome, lg_preds))
roc.area(grass_tennis_select$outcome, lg_preds)
mean(grass_tennis_select$outcome == ifelse(lg_preds > .8, 1, 0))
roc.plot(grass_tennis_select$outcome, lg_preds)
nn_model = neuralnet(outcome ~ ., data = grass_tennis_train, hidden = 2)
plot(nn_model)
pred_nn = compute(nn_model, grass_tennis_test)
roc.plot(grass_tennis_test$outcome, pred_nn$net.result)
roc.area(grass_tennis_test$outcome, pred_nn$net.result)
mean(grass_tennis_test$outcome == ifelse(pred_nn$net.result > .6, 1, 0))
mean(grass_tennis_select$outcome == ifelse(lg_preds > .1, 1, 0)) # Accuracy
roc.plot(grass_tennis_select$outcome, lg_preds)
roc.area(grass_tennis_select$outcome, lg_preds)
mean(grass_tennis_select$outcome == ifelse(lg_preds > .1, 1, 0)) # Accuracy
log_reg_model2 = glm(outcome ~ (diff_rank + diff_match_win_percent + diff_5_set_match_win_percent + diff_match_win_percent_grass + diff_games_win_percent_grass + diff_5_set_match_win_percent_grass + diff_match_win_percent_52 + diff_games_win_percent_grass_60 + diff_games_win_percent_hh)^2, data = grass_tennis_select, family = "binomial")
sum.log_reg2 = summary(log_reg_model2)
sum.log_reg2
sum.log_reg
lg2_preds = predict(log_reg_model2, grass_tennis_select$outcome)
lg2_preds = predict(log_reg_model2, grass_tennis_select)
mean(grass_tennis_select$outcome == ifelse(lg2_preds > .1, 1, 0)) # Accuracy
roc.plot(grass_tennis_select$outcome, lg2_preds)
roc.area(grass_tennis_select$outcome, lg2_preds)
?pairs
pairs(grass_tennis[,reduced_feats], labels = c("5"))
pairs(grass_tennis[,reduced_feats], labels = c("Rank diff", "Match win % diff", "5 set match win $ diff"))
pairs(grass_tennis[,reduced_feats], labels = c("Rank diff", "Win % diff", "5set win % diff", "Win % diff grass"))
pairs(grass_tennis[,reduced_feats], labels = c("Rank diff", "W % diff", "5set W % diff", "W % diff G", "W games % diff G", "5set W % diff G", "W % diff 52", "W % diff G 60", "W games % diff HH"))
pacman::p_load(dplyr, caret, corrplot, MASS, verification, MLmetrics)
F1_Score(grass_tennis_select$outcome, ifelse(lg2_preds > .1, 1, 0)))
F1_Score(grass_tennis_select$outcome, ifelse(lg2_preds > .1, 1, 0))
pairs(grass_tennis[,reduced_feats], labels = c("Rank diff", "W % diff", "5set W % diff", "W % diff G", "W games % diff G", "5set W % diff G", "W % diff 52", "W % diff G 60", "W games % diff HH"))
?corrplot
?cor
corrplot(cor(grass_tennis[,reduced_feats]))
corrplot(cor(grass_tennis[,reduced_feats]))
corrplot(cor(grass_tennis[,reduced_feats]), tl.srt = "h")
grass_tennis_select1 = grass_tennis_select
colnames(grass_tennis_select1) = c("Rank diff", "W % diff", "5set W % diff", "W % diff G", "W games % diff G", "5set W % diff G", "W % diff 52", "W % diff G 60", "W games % diff HH")
corrplot(cor(grass_tennis_select1[,reduced_feats]))
corrplot(cor(grass_tennis_select1))
View(grass_tennis_select)
grass_tennis_select1 = grass_tennis_select
colnames(grass_tennis_select1) = c("Rank diff", "W % diff", "5set W % diff", "W % diff G", "W games % diff G", "5set W % diff G", "W % diff 52", "W % diff G 60", "W games % diff HH", "outcome")
corrplot(cor(grass_tennis_select1))
corrplot(cor(grass_tennis_select1))
pairs(grass_tennis[,reduced_feats], labels = c("Rank diff", "W % diff", "5set W % diff", "W % diff G", "W games % diff G", "5set W % diff G", "W % diff 52", "W % diff G 60", "W games % diff HH"))
